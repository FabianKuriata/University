let divideList (list, elements) = 
	let rec divideListHelper (list, elements, counter) =
		if counter > List.length list then []
		else if(counter mod elements <> 0) then List.hd :: divideListHelper(List.tl list, elements, counter+1)
		else []
	in divideListHelper(list, elements, 1)
	
	
	divideList([2;2],3)
	
	
	let rec divideList (list, number) = 
		if list = [] then []
		else if number = 0 then divideList(list, 3)
		else if number > List.length list then list
		else List.hd list :: divideList(List.tl list, number-1)
		
	divideList([2;2;3;4;5],3)	
	
	
	let split(list, number)=
  let rec split1(list, number, lesser, greater)=
    match list with
    | [] -> [List.rev lesser;List.rev greater]
    | head::tail ->
      match (head <= number) with
        true  -> split1(tail,number,head::lesser,greater)
      | false -> split1(tail,number,lesser,head::greater)
  in split1(list, number, [], []);;

split([1;5;3;4;5;10;33],10);;